class Item():
    def __init__(self, row, col, value):
        self.row = row
        self.col = col
        self.value = value
    def show(self):
        print([self.row, self.col, self.value])
        
def fastTranspose(data):
    num = len(data)
    sparseMatrix = [None] * (num - 2)
    
    if num > 0:
        rowSize = [0] * data[1]
        rowStart = [0] * data[1]
        
        for i in range(2, num):
            rowSize[(data[i].col) - 1] = rowSize[(data[i].col) - 1] + 1
        
        rowStart[0] = 0
        for i in range(1, data[1]):
            rowStart[i] = rowStart[i - 1] + rowSize[i - 1]
            
        for i in range(2, num):
            j = rowStart[data[i].col - 1]
            item = Item(data[i].col, data[i].row, data[i].value)
            sparseMatrix[j] = item
            rowStart[data[i].col - 1] = rowStart[data[i].col - 1] + 1
    
    return sparseMatrix

#執行
data=[8, 7, Item(1,4,3), Item(1,6,-1), Item(3,3,2), Item(3,6,1), Item(4,4,1), Item(5,1,2), Item(6,2,7), Item(7,5,-3), Item(8,7,-2)]
sparseMatrix = fastTranspose(data)
for i in sparseMatrix:
    i.show()